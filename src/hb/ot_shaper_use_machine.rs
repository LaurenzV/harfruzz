#![allow(
    dead_code,
    non_upper_case_globals,
    unused_assignments,
    unused_parens,
    while_true,
    clippy::assign_op_pattern,
    clippy::collapsible_if,
    clippy::comparison_chain,
    clippy::double_parens,
    clippy::unnecessary_cast,
    clippy::single_match,
    clippy::never_loop
)]

use core::cell::Cell;

use super::buffer::{hb_buffer_t, HB_BUFFER_SCRATCH_FLAG_HAS_BROKEN_SYLLABLE};
use super::hb_glyph_info_t;
use super::machine_cursor::MachineCursor;
use super::ot_layout::*;
use super::ot_shaper_use::category;

static _use_syllable_machine_trans_keys: [u8; 242] = [
    0, 38, 5, 38, 5, 38, 1, 38, 10, 33, 11, 32, 12, 32, 13, 32, 30, 31, 31, 31, 11, 33, 11, 33, 11,
    33, 1, 1, 11, 33, 9, 38, 10, 38, 10, 38, 10, 38, 6, 38, 10, 38, 6, 38, 6, 38, 6, 38, 5, 38, 1,
    1, 1, 33, 5, 38, 26, 27, 27, 27, 5, 38, 5, 38, 1, 38, 10, 33, 11, 32, 12, 32, 13, 32, 30, 31,
    31, 31, 11, 33, 11, 33, 11, 33, 1, 1, 11, 33, 9, 38, 10, 38, 10, 38, 10, 38, 6, 38, 10, 38, 6,
    38, 6, 38, 6, 38, 5, 38, 1, 1, 1, 33, 7, 7, 3, 3, 5, 38, 5, 38, 1, 38, 10, 33, 11, 32, 12, 32,
    13, 32, 30, 31, 31, 31, 11, 33, 11, 33, 11, 33, 1, 1, 11, 33, 9, 38, 10, 38, 10, 38, 10, 38, 6,
    38, 10, 38, 6, 38, 6, 38, 6, 38, 5, 38, 1, 1, 1, 33, 5, 38, 5, 38, 1, 38, 10, 33, 11, 32, 12,
    32, 13, 32, 30, 31, 31, 31, 11, 33, 11, 33, 11, 33, 1, 1, 11, 33, 9, 38, 10, 38, 10, 38, 10,
    38, 6, 38, 10, 38, 6, 38, 6, 38, 6, 38, 5, 38, 1, 1, 1, 33, 3, 3, 7, 7, 1, 38, 5, 38, 26, 27,
    27, 27, 1, 4, 35, 37, 34, 37, 34, 36, 0, 0,
];
static _use_syllable_machine_char_class: [i8; 56] = [
    0, 1, 2, 2, 3, 4, 2, 2, 2, 2, 2, 5, 6, 7, 2, 2, 2, 2, 8, 2, 2, 2, 9, 10, 11, 12, 13, 14, 15,
    16, 17, 18, 19, 20, 21, 22, 2, 23, 24, 25, 2, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37,
    38, 0, 0,
];
static _use_syllable_machine_index_offsets: [i16; 122] = [
    0, 39, 73, 107, 145, 169, 191, 212, 232, 234, 235, 258, 281, 304, 305, 328, 358, 387, 416, 445,
    478, 507, 540, 573, 606, 640, 641, 674, 708, 710, 711, 745, 779, 817, 841, 863, 884, 904, 906,
    907, 930, 953, 976, 977, 1000, 1030, 1059, 1088, 1117, 1150, 1179, 1212, 1245, 1278, 1312,
    1313, 1346, 1347, 1348, 1382, 1416, 1454, 1478, 1500, 1521, 1541, 1543, 1544, 1567, 1590, 1613,
    1614, 1637, 1667, 1696, 1725, 1754, 1787, 1816, 1849, 1882, 1915, 1949, 1950, 1983, 2017, 2051,
    2089, 2113, 2135, 2156, 2176, 2178, 2179, 2202, 2225, 2248, 2249, 2272, 2302, 2331, 2360, 2389,
    2422, 2451, 2484, 2517, 2550, 2584, 2585, 2618, 2619, 2620, 2658, 2692, 2694, 2695, 2699, 2702,
    2706, 0, 0,
];
static _use_syllable_machine_indices: [i16; 2711] = [
    1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26,
    27, 28, 29, 30, 31, 32, 33, 30, 34, 3, 35, 3, 36, 38, 39, 37, 37, 40, 41, 42, 43, 44, 45, 46,
    47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 37, 59, 60, 61, 62, 59, 37, 37, 37, 37, 63, 38,
    39, 37, 37, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 50, 51, 52, 53, 54, 55, 56, 37, 37, 37, 59,
    60, 61, 62, 59, 37, 37, 37, 37, 63, 38, 37, 37, 37, 37, 37, 37, 37, 37, 41, 42, 43, 44, 37, 37,
    37, 37, 37, 37, 37, 37, 37, 54, 55, 56, 37, 37, 37, 37, 60, 61, 62, 64, 37, 37, 37, 37, 41, 41,
    42, 43, 44, 37, 37, 37, 37, 37, 37, 37, 37, 37, 54, 55, 56, 37, 37, 37, 37, 60, 61, 62, 64, 42,
    43, 44, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 60, 61, 62, 43, 44, 37,
    37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 60, 61, 62, 44, 37, 37, 37, 37, 37,
    37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 60, 61, 62, 60, 61, 61, 42, 43, 44, 37, 37, 37, 37,
    37, 37, 37, 37, 37, 54, 55, 56, 37, 37, 37, 37, 60, 61, 62, 64, 42, 43, 44, 37, 37, 37, 37, 37,
    37, 37, 37, 37, 37, 55, 56, 37, 37, 37, 37, 60, 61, 62, 64, 42, 43, 44, 37, 37, 37, 37, 37, 37,
    37, 37, 37, 37, 37, 56, 37, 37, 37, 37, 60, 61, 62, 64, 65, 42, 43, 44, 37, 37, 37, 37, 37, 37,
    37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 60, 61, 62, 64, 40, 41, 42, 43, 44, 37, 37, 37, 37, 37,
    37, 51, 52, 53, 54, 55, 56, 37, 37, 37, 37, 60, 61, 62, 64, 37, 37, 37, 37, 41, 41, 42, 43, 44,
    37, 37, 37, 37, 37, 37, 51, 52, 53, 54, 55, 56, 37, 37, 37, 37, 60, 61, 62, 64, 37, 37, 37, 37,
    41, 41, 42, 43, 44, 37, 37, 37, 37, 37, 37, 37, 52, 53, 54, 55, 56, 37, 37, 37, 37, 60, 61, 62,
    64, 37, 37, 37, 37, 41, 41, 42, 43, 44, 37, 37, 37, 37, 37, 37, 37, 37, 53, 54, 55, 56, 37, 37,
    37, 37, 60, 61, 62, 64, 37, 37, 37, 37, 41, 66, 37, 37, 40, 41, 42, 43, 44, 37, 46, 47, 37, 37,
    37, 51, 52, 53, 54, 55, 56, 37, 37, 37, 37, 60, 61, 62, 64, 37, 37, 37, 37, 41, 41, 42, 43, 44,
    37, 37, 37, 37, 37, 37, 37, 37, 37, 54, 55, 56, 37, 37, 37, 37, 60, 61, 62, 64, 37, 37, 37, 37,
    41, 66, 37, 37, 40, 41, 42, 43, 44, 37, 37, 47, 37, 37, 37, 51, 52, 53, 54, 55, 56, 37, 37, 37,
    37, 60, 61, 62, 64, 37, 37, 37, 37, 41, 66, 37, 37, 40, 41, 42, 43, 44, 37, 37, 37, 37, 37, 37,
    51, 52, 53, 54, 55, 56, 37, 37, 37, 37, 60, 61, 62, 64, 37, 37, 37, 37, 41, 66, 37, 37, 40, 41,
    42, 43, 44, 45, 46, 47, 37, 37, 37, 51, 52, 53, 54, 55, 56, 37, 37, 37, 37, 60, 61, 62, 64, 37,
    37, 37, 37, 41, 38, 39, 37, 37, 40, 41, 42, 43, 44, 45, 46, 47, 48, 37, 50, 51, 52, 53, 54, 55,
    56, 37, 37, 37, 59, 60, 61, 62, 59, 37, 37, 37, 37, 63, 38, 38, 37, 37, 37, 37, 37, 37, 37, 37,
    41, 42, 43, 44, 37, 37, 37, 37, 37, 37, 37, 37, 37, 54, 55, 56, 37, 37, 37, 37, 60, 61, 62, 64,
    38, 39, 37, 37, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 37, 37, 37,
    59, 60, 61, 62, 59, 37, 37, 37, 37, 63, 57, 58, 58, 68, 69, 67, 67, 70, 71, 72, 73, 74, 75, 76,
    77, 78, 2, 79, 80, 81, 82, 83, 84, 85, 67, 67, 67, 86, 87, 88, 89, 90, 67, 67, 67, 67, 91, 68,
    69, 67, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 79, 80, 81, 82, 83, 84, 85, 67, 67, 67, 86,
    87, 88, 89, 90, 67, 67, 67, 67, 91, 68, 67, 67, 67, 67, 67, 67, 67, 67, 71, 72, 73, 74, 67, 67,
    67, 67, 67, 67, 67, 67, 67, 83, 84, 85, 67, 67, 67, 67, 87, 88, 89, 92, 67, 67, 67, 67, 71, 71,
    72, 73, 74, 67, 67, 67, 67, 67, 67, 67, 67, 67, 83, 84, 85, 67, 67, 67, 67, 87, 88, 89, 92, 72,
    73, 74, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 87, 88, 89, 73, 74, 67,
    67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 87, 88, 89, 74, 67, 67, 67, 67, 67,
    67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 87, 88, 89, 87, 88, 88, 72, 73, 74, 67, 67, 67, 67,
    67, 67, 67, 67, 67, 83, 84, 85, 67, 67, 67, 67, 87, 88, 89, 92, 72, 73, 74, 67, 67, 67, 67, 67,
    67, 67, 67, 67, 67, 84, 85, 67, 67, 67, 67, 87, 88, 89, 92, 72, 73, 74, 67, 67, 67, 67, 67, 67,
    67, 67, 67, 67, 67, 85, 67, 67, 67, 67, 87, 88, 89, 92, 94, 72, 73, 74, 67, 67, 67, 67, 67, 67,
    67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 87, 88, 89, 92, 70, 71, 72, 73, 74, 67, 67, 67, 67, 67,
    67, 80, 81, 82, 83, 84, 85, 67, 67, 67, 67, 87, 88, 89, 92, 67, 67, 67, 67, 71, 71, 72, 73, 74,
    67, 67, 67, 67, 67, 67, 80, 81, 82, 83, 84, 85, 67, 67, 67, 67, 87, 88, 89, 92, 67, 67, 67, 67,
    71, 71, 72, 73, 74, 67, 67, 67, 67, 67, 67, 67, 81, 82, 83, 84, 85, 67, 67, 67, 67, 87, 88, 89,
    92, 67, 67, 67, 67, 71, 71, 72, 73, 74, 67, 67, 67, 67, 67, 67, 67, 67, 82, 83, 84, 85, 67, 67,
    67, 67, 87, 88, 89, 92, 67, 67, 67, 67, 71, 95, 67, 67, 70, 71, 72, 73, 74, 67, 76, 77, 67, 67,
    67, 80, 81, 82, 83, 84, 85, 67, 67, 67, 67, 87, 88, 89, 92, 67, 67, 67, 67, 71, 71, 72, 73, 74,
    67, 67, 67, 67, 67, 67, 67, 67, 67, 83, 84, 85, 67, 67, 67, 67, 87, 88, 89, 92, 67, 67, 67, 67,
    71, 95, 67, 67, 70, 71, 72, 73, 74, 67, 67, 77, 67, 67, 67, 80, 81, 82, 83, 84, 85, 67, 67, 67,
    67, 87, 88, 89, 92, 67, 67, 67, 67, 71, 95, 67, 67, 70, 71, 72, 73, 74, 67, 67, 67, 67, 67, 67,
    80, 81, 82, 83, 84, 85, 67, 67, 67, 67, 87, 88, 89, 92, 67, 67, 67, 67, 71, 95, 67, 67, 70, 71,
    72, 73, 74, 75, 76, 77, 67, 67, 67, 80, 81, 82, 83, 84, 85, 67, 67, 67, 67, 87, 88, 89, 92, 67,
    67, 67, 67, 71, 68, 69, 67, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 67, 79, 80, 81, 82, 83, 84,
    85, 67, 67, 67, 86, 87, 88, 89, 90, 67, 67, 67, 67, 91, 68, 68, 67, 67, 67, 67, 67, 67, 67, 67,
    71, 72, 73, 74, 67, 67, 67, 67, 67, 67, 67, 67, 67, 83, 84, 85, 67, 67, 67, 67, 87, 88, 89, 92,
    98, 4, 100, 101, 67, 67, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115,
    116, 117, 118, 57, 58, 67, 119, 120, 121, 89, 122, 67, 67, 67, 67, 123, 100, 101, 67, 67, 102,
    103, 104, 105, 106, 107, 108, 109, 110, 112, 112, 113, 114, 115, 116, 117, 118, 67, 67, 67,
    119, 120, 121, 89, 122, 67, 67, 67, 67, 123, 100, 67, 67, 67, 67, 67, 67, 67, 67, 103, 104,
    105, 106, 67, 67, 67, 67, 67, 67, 67, 67, 67, 116, 117, 118, 67, 67, 67, 67, 120, 121, 89, 124,
    67, 67, 67, 67, 103, 103, 104, 105, 106, 67, 67, 67, 67, 67, 67, 67, 67, 67, 116, 117, 118, 67,
    67, 67, 67, 120, 121, 89, 124, 104, 105, 106, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
    67, 67, 67, 67, 120, 121, 89, 105, 106, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
    67, 67, 120, 121, 89, 106, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 120,
    121, 89, 120, 121, 121, 104, 105, 106, 67, 67, 67, 67, 67, 67, 67, 67, 67, 116, 117, 118, 67,
    67, 67, 67, 120, 121, 89, 124, 104, 105, 106, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 117, 118,
    67, 67, 67, 67, 120, 121, 89, 124, 104, 105, 106, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
    118, 67, 67, 67, 67, 120, 121, 89, 124, 125, 104, 105, 106, 67, 67, 67, 67, 67, 67, 67, 67, 67,
    67, 67, 67, 67, 67, 67, 67, 120, 121, 89, 124, 102, 103, 104, 105, 106, 67, 67, 67, 67, 67, 67,
    113, 114, 115, 116, 117, 118, 67, 67, 67, 67, 120, 121, 89, 124, 67, 67, 67, 67, 103, 103, 104,
    105, 106, 67, 67, 67, 67, 67, 67, 113, 114, 115, 116, 117, 118, 67, 67, 67, 67, 120, 121, 89,
    124, 67, 67, 67, 67, 103, 103, 104, 105, 106, 67, 67, 67, 67, 67, 67, 67, 114, 115, 116, 117,
    118, 67, 67, 67, 67, 120, 121, 89, 124, 67, 67, 67, 67, 103, 103, 104, 105, 106, 67, 67, 67,
    67, 67, 67, 67, 67, 115, 116, 117, 118, 67, 67, 67, 67, 120, 121, 89, 124, 67, 67, 67, 67, 103,
    126, 67, 67, 102, 103, 104, 105, 106, 67, 108, 109, 67, 67, 67, 113, 114, 115, 116, 117, 118,
    67, 67, 67, 67, 120, 121, 89, 124, 67, 67, 67, 67, 103, 103, 104, 105, 106, 67, 67, 67, 67, 67,
    67, 67, 67, 67, 116, 117, 118, 67, 67, 67, 67, 120, 121, 89, 124, 67, 67, 67, 67, 103, 126, 67,
    67, 102, 103, 104, 105, 106, 67, 67, 109, 67, 67, 67, 113, 114, 115, 116, 117, 118, 67, 67, 67,
    67, 120, 121, 89, 124, 67, 67, 67, 67, 103, 126, 67, 67, 102, 103, 104, 105, 106, 67, 67, 67,
    67, 67, 67, 113, 114, 115, 116, 117, 118, 67, 67, 67, 67, 120, 121, 89, 124, 67, 67, 67, 67,
    103, 126, 67, 67, 102, 103, 104, 105, 106, 107, 108, 109, 67, 67, 67, 113, 114, 115, 116, 117,
    118, 67, 67, 67, 67, 120, 121, 89, 124, 67, 67, 67, 67, 103, 100, 101, 67, 67, 102, 103, 104,
    105, 106, 107, 108, 109, 110, 67, 112, 113, 114, 115, 116, 117, 118, 67, 67, 67, 119, 120, 121,
    89, 122, 67, 67, 67, 67, 123, 100, 100, 67, 67, 67, 67, 67, 67, 67, 67, 103, 104, 105, 106, 67,
    67, 67, 67, 67, 67, 67, 67, 67, 116, 117, 118, 67, 67, 67, 67, 120, 121, 89, 124, 100, 101, 67,
    67, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 67,
    67, 67, 119, 120, 121, 89, 122, 67, 67, 67, 67, 123, 6, 7, 127, 127, 10, 11, 12, 13, 14, 15,
    16, 17, 18, 20, 20, 21, 22, 23, 24, 25, 26, 127, 127, 127, 30, 31, 32, 33, 30, 127, 127, 127,
    127, 36, 6, 127, 127, 127, 127, 127, 127, 127, 127, 11, 12, 13, 14, 127, 127, 127, 127, 127,
    127, 127, 127, 127, 24, 25, 26, 127, 127, 127, 127, 31, 32, 33, 128, 127, 127, 127, 127, 11,
    11, 12, 13, 14, 127, 127, 127, 127, 127, 127, 127, 127, 127, 24, 25, 26, 127, 127, 127, 127,
    31, 32, 33, 128, 12, 13, 14, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
    127, 127, 127, 31, 32, 33, 13, 14, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
    127, 127, 127, 127, 31, 32, 33, 14, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
    127, 127, 127, 127, 31, 32, 33, 31, 32, 32, 12, 13, 14, 127, 127, 127, 127, 127, 127, 127, 127,
    127, 24, 25, 26, 127, 127, 127, 127, 31, 32, 33, 128, 12, 13, 14, 127, 127, 127, 127, 127, 127,
    127, 127, 127, 127, 25, 26, 127, 127, 127, 127, 31, 32, 33, 128, 12, 13, 14, 127, 127, 127,
    127, 127, 127, 127, 127, 127, 127, 127, 26, 127, 127, 127, 127, 31, 32, 33, 128, 129, 12, 13,
    14, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 31, 32, 33,
    128, 10, 11, 12, 13, 14, 127, 127, 127, 127, 127, 127, 21, 22, 23, 24, 25, 26, 127, 127, 127,
    127, 31, 32, 33, 128, 127, 127, 127, 127, 11, 11, 12, 13, 14, 127, 127, 127, 127, 127, 127, 21,
    22, 23, 24, 25, 26, 127, 127, 127, 127, 31, 32, 33, 128, 127, 127, 127, 127, 11, 11, 12, 13,
    14, 127, 127, 127, 127, 127, 127, 127, 22, 23, 24, 25, 26, 127, 127, 127, 127, 31, 32, 33, 128,
    127, 127, 127, 127, 11, 11, 12, 13, 14, 127, 127, 127, 127, 127, 127, 127, 127, 23, 24, 25, 26,
    127, 127, 127, 127, 31, 32, 33, 128, 127, 127, 127, 127, 11, 130, 127, 127, 10, 11, 12, 13, 14,
    127, 16, 17, 127, 127, 127, 21, 22, 23, 24, 25, 26, 127, 127, 127, 127, 31, 32, 33, 128, 127,
    127, 127, 127, 11, 11, 12, 13, 14, 127, 127, 127, 127, 127, 127, 127, 127, 127, 24, 25, 26,
    127, 127, 127, 127, 31, 32, 33, 128, 127, 127, 127, 127, 11, 130, 127, 127, 10, 11, 12, 13, 14,
    127, 127, 17, 127, 127, 127, 21, 22, 23, 24, 25, 26, 127, 127, 127, 127, 31, 32, 33, 128, 127,
    127, 127, 127, 11, 130, 127, 127, 10, 11, 12, 13, 14, 127, 127, 127, 127, 127, 127, 21, 22, 23,
    24, 25, 26, 127, 127, 127, 127, 31, 32, 33, 128, 127, 127, 127, 127, 11, 130, 127, 127, 10, 11,
    12, 13, 14, 15, 16, 17, 127, 127, 127, 21, 22, 23, 24, 25, 26, 127, 127, 127, 127, 31, 32, 33,
    128, 127, 127, 127, 127, 11, 6, 7, 127, 127, 10, 11, 12, 13, 14, 15, 16, 17, 18, 127, 20, 21,
    22, 23, 24, 25, 26, 127, 127, 127, 30, 31, 32, 33, 30, 127, 127, 127, 127, 36, 6, 6, 127, 127,
    127, 127, 127, 127, 127, 127, 11, 12, 13, 14, 127, 127, 127, 127, 127, 127, 127, 127, 127, 24,
    25, 26, 127, 127, 127, 127, 31, 32, 33, 128, 131, 8, 2, 127, 127, 2, 6, 7, 8, 127, 10, 11, 12,
    13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 127, 30, 31, 32, 33, 30, 127,
    127, 127, 127, 36, 6, 7, 127, 127, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,
    25, 26, 127, 127, 127, 30, 31, 32, 33, 30, 127, 127, 127, 127, 36, 27, 28, 28, 2, 132, 132, 2,
    134, 133, 34, 34, 134, 133, 134, 34, 133, 35, 0, 0,
];
static _use_syllable_machine_index_defaults: [i16; 122] = [
    3, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
    37, 37, 37, 37, 37, 37, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 93, 67, 67, 67, 67, 67,
    67, 67, 67, 67, 67, 67, 96, 67, 97, 99, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 93, 67,
    67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 96, 67, 67, 127, 127, 127, 127, 127, 127, 127, 127,
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
    127, 127, 127, 127, 132, 133, 133, 133, 0, 0,
];
static _use_syllable_machine_cond_targs: [i8; 137] = [
    0, 1, 30, 0, 56, 58, 85, 86, 110, 112, 98, 87, 88, 89, 90, 102, 104, 105, 106, 113, 107, 99,
    100, 101, 93, 94, 95, 114, 115, 116, 108, 91, 92, 0, 117, 119, 109, 0, 2, 3, 15, 4, 5, 6, 7,
    19, 21, 22, 23, 27, 24, 16, 17, 18, 10, 11, 12, 28, 29, 25, 8, 9, 0, 26, 13, 14, 20, 0, 31, 32,
    44, 33, 34, 35, 36, 48, 50, 51, 52, 53, 45, 46, 47, 39, 40, 41, 54, 37, 38, 0, 54, 55, 42, 0,
    43, 49, 0, 0, 57, 0, 59, 60, 72, 61, 62, 63, 64, 76, 78, 79, 80, 84, 81, 73, 74, 75, 67, 68,
    69, 82, 65, 66, 82, 83, 70, 71, 77, 0, 96, 97, 103, 111, 0, 0, 118, 0, 0,
];
static _use_syllable_machine_cond_actions: [i8; 137] = [
    0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 4, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0,
    0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 9, 10, 0, 0, 11, 0,
    0, 12, 13, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 10, 0, 0,
    0, 0, 15, 0, 0, 0, 0, 16, 17, 0, 0, 0,
];
static _use_syllable_machine_to_state_actions: [i8; 122] = [
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
];
static _use_syllable_machine_from_state_actions: [i8; 122] = [
    2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
];
static _use_syllable_machine_eof_trans: [i16; 122] = [
    1, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38,
    38, 38, 38, 38, 38, 38, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 94, 68, 68, 68, 68, 68,
    68, 68, 68, 68, 68, 68, 97, 68, 98, 100, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 94,
    68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 97, 68, 68, 128, 128, 128, 128, 128, 128, 128, 128,
    128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
    128, 128, 128, 128, 133, 134, 134, 134, 0, 0,
];
static use_syllable_machine_start: i32 = 0;
static use_syllable_machine_first_final: i32 = 0;
static use_syllable_machine_error: i32 = -1;
static use_syllable_machine_en_main: i32 = 0;
#[derive(Clone, Copy)]
pub enum SyllableType {
    IndependentCluster,
    ViramaTerminatedCluster,
    SakotTerminatedCluster,
    StandardCluster,
    NumberJoinerTerminatedCluster,
    NumeralCluster,
    SymbolCluster,
    HieroglyphCluster,
    BrokenCluster,
    NonCluster,
}

pub fn find_syllables(buffer: &mut hb_buffer_t) {
    let mut cs = 0;
    let infos = Cell::as_slice_of_cells(Cell::from_mut(&mut buffer.info));
    let p0 = MachineCursor::new(infos, included);
    let mut p = p0;
    let mut ts = p0;
    let mut te = p0;
    let mut act = p0;
    let pe = p.end();
    let eof = p.end();
    let mut syllable_serial = 1u8;

    // Please manually replace assignments of 0 to p, ts, and te
    // to use p0 instead

    macro_rules! found_syllable {
        ($kind:expr) => {{
            found_syllable(ts.index(), te.index(), &mut syllable_serial, $kind, infos);
        }};
    }

    {
        cs = (use_syllable_machine_start) as i32;
        ts = p0;
        te = p0;
        act = p0;
    }

    {
        let mut _trans = 0;
        let mut _keys: i32 = 0;
        let mut _inds: i32 = 0;
        let mut _ic = 0;
        '_resume: while (p != pe || p == eof) {
            '_again: while (true) {
                match (_use_syllable_machine_from_state_actions[(cs) as usize]) {
                    2 => {
                        ts = p;
                    }

                    _ => {}
                }
                if (p == eof) {
                    {
                        if (_use_syllable_machine_eof_trans[(cs) as usize] > 0) {
                            {
                                _trans =
                                    (_use_syllable_machine_eof_trans[(cs) as usize]) as u32 - 1;
                            }
                        }
                    }
                } else {
                    {
                        _keys = (cs << 1) as i32;
                        _inds = (_use_syllable_machine_index_offsets[(cs) as usize]) as i32;
                        if ((infos[p.index()].get().use_category() as u8) <= 52) {
                            {
                                _ic = (_use_syllable_machine_char_class[((infos[p.index()]
                                    .get()
                                    .use_category()
                                    as u8)
                                    as i32
                                    - 0)
                                    as usize]) as i32;
                                if (_ic
                                    <= (_use_syllable_machine_trans_keys[(_keys + 1) as usize])
                                        as i32
                                    && _ic
                                        >= (_use_syllable_machine_trans_keys[(_keys) as usize])
                                            as i32)
                                {
                                    _trans = (_use_syllable_machine_indices[(_inds
                                        + (_ic
                                            - (_use_syllable_machine_trans_keys[(_keys) as usize])
                                                as i32)
                                            as i32)
                                        as usize])
                                        as u32;
                                } else {
                                    _trans = (_use_syllable_machine_index_defaults[(cs) as usize])
                                        as u32;
                                }
                            }
                        } else {
                            {
                                _trans =
                                    (_use_syllable_machine_index_defaults[(cs) as usize]) as u32;
                            }
                        }
                    }
                }
                cs = (_use_syllable_machine_cond_targs[(_trans) as usize]) as i32;
                if (_use_syllable_machine_cond_actions[(_trans) as usize] != 0) {
                    {
                        match (_use_syllable_machine_cond_actions[(_trans) as usize]) {
                            9 => {
                                te = p + 1;
                                {
                                    found_syllable!(SyllableType::StandardCluster);
                                }
                            }
                            6 => {
                                te = p + 1;
                                {
                                    found_syllable!(SyllableType::SymbolCluster);
                                }
                            }
                            4 => {
                                te = p + 1;
                                {
                                    found_syllable!(SyllableType::BrokenCluster);
                                    buffer.scratch_flags |=
                                        HB_BUFFER_SCRATCH_FLAG_HAS_BROKEN_SYLLABLE;
                                }
                            }
                            3 => {
                                te = p + 1;
                                {
                                    found_syllable!(SyllableType::NonCluster);
                                }
                            }
                            11 => {
                                te = p;
                                p = p - 1;
                                {
                                    found_syllable!(SyllableType::SakotTerminatedCluster);
                                }
                            }
                            7 => {
                                te = p;
                                p = p - 1;
                                {
                                    found_syllable!(SyllableType::StandardCluster);
                                }
                            }
                            14 => {
                                te = p;
                                p = p - 1;
                                {
                                    found_syllable!(SyllableType::NumberJoinerTerminatedCluster);
                                }
                            }
                            13 => {
                                te = p;
                                p = p - 1;
                                {
                                    found_syllable!(SyllableType::NumeralCluster);
                                }
                            }
                            5 => {
                                te = p;
                                p = p - 1;
                                {
                                    found_syllable!(SyllableType::SymbolCluster);
                                }
                            }
                            17 => {
                                te = p;
                                p = p - 1;
                                {
                                    found_syllable!(SyllableType::HieroglyphCluster);
                                }
                            }
                            15 => {
                                te = p;
                                p = p - 1;
                                {
                                    found_syllable!(SyllableType::BrokenCluster);
                                    buffer.scratch_flags |=
                                        HB_BUFFER_SCRATCH_FLAG_HAS_BROKEN_SYLLABLE;
                                }
                            }
                            16 => {
                                te = p;
                                p = p - 1;
                                {
                                    found_syllable!(SyllableType::NonCluster);
                                }
                            }
                            12 => match (act).index() {
                                1 => {
                                    p = (te) - 1;
                                    {
                                        found_syllable!(SyllableType::ViramaTerminatedCluster);
                                    }
                                }
                                2 => {
                                    p = (te) - 1;
                                    {
                                        found_syllable!(SyllableType::SakotTerminatedCluster);
                                    }
                                }

                                _ => {}
                            },
                            8 => {
                                {
                                    {
                                        te = p + 1;
                                    }
                                }
                                {
                                    {
                                        act = p + 1;
                                    }
                                }
                            }
                            10 => {
                                {
                                    {
                                        te = p + 1;
                                    }
                                }
                                {
                                    {
                                        act = p + 2;
                                    }
                                }
                            }

                            _ => {}
                        }
                    }
                }
                break '_again;
            }
            if (p == eof) {
                {
                    if (cs >= 0) {
                        break '_resume;
                    }
                }
            } else {
                {
                    match (_use_syllable_machine_to_state_actions[(cs) as usize]) {
                        1 => {
                            ts = p0;
                        }

                        _ => {}
                    }
                    p += 1;
                    continue '_resume;
                }
            }
            break '_resume;
        }
    }
}

#[inline]
fn found_syllable(
    start: usize,
    end: usize,
    syllable_serial: &mut u8,
    kind: SyllableType,
    buffer: &[Cell<hb_glyph_info_t>],
) {
    for i in start..end {
        let mut glyph = buffer[i].get();
        glyph.set_syllable((*syllable_serial << 4) | kind as u8);
        buffer[i].set(glyph);
    }

    *syllable_serial += 1;

    if *syllable_serial == 16 {
        *syllable_serial = 1;
    }
}

fn not_ccs_default_ignorable(i: &hb_glyph_info_t) -> bool {
    i.use_category() != category::CGJ
}

fn included(infos: &[Cell<hb_glyph_info_t>], i: usize) -> bool {
    let glyph = infos[i].get();
    if !not_ccs_default_ignorable(&glyph) {
        return false;
    }
    if glyph.use_category() == category::ZWNJ {
        for glyph2 in &infos[i + 1..] {
            if not_ccs_default_ignorable(&glyph2.get()) {
                return !_hb_glyph_info_is_unicode_mark(&glyph2.get());
            }
        }
    }
    true
}
