#![allow(
    dead_code,
    non_upper_case_globals,
    unused_assignments,
    unused_parens,
    while_true,
    clippy::assign_op_pattern,
    clippy::collapsible_if,
    clippy::comparison_chain,
    clippy::double_parens,
    clippy::unnecessary_cast,
    clippy::single_match,
    clippy::never_loop
)]

use core::cell::Cell;

use super::buffer::{hb_buffer_t, HB_BUFFER_SCRATCH_FLAG_HAS_BROKEN_SYLLABLE};
use super::hb_glyph_info_t;
use super::machine_cursor::MachineCursor;
use super::ot_layout::*;
use super::ot_shaper_use::category;

static _use_syllable_machine_trans_keys: [u8; 246] = [
    0, 39, 5, 39, 5, 39, 1, 39, 8, 34, 8, 33, 8, 33, 8, 33, 8, 32, 8, 32, 8, 8, 8, 34, 8, 34, 8,
    34, 1, 8, 8, 34, 8, 39, 8, 39, 8, 39, 8, 39, 6, 39, 8, 39, 6, 39, 6, 39, 6, 39, 5, 39, 1, 8, 1,
    34, 8, 28, 8, 28, 5, 39, 1, 39, 8, 34, 8, 33, 8, 33, 8, 33, 8, 32, 8, 32, 8, 8, 8, 34, 8, 34,
    8, 34, 1, 8, 8, 34, 8, 39, 8, 39, 8, 39, 8, 39, 6, 39, 8, 39, 6, 39, 6, 39, 6, 39, 5, 39, 1, 8,
    1, 8, 1, 34, 7, 8, 3, 8, 5, 39, 5, 39, 1, 39, 8, 34, 8, 33, 8, 33, 8, 33, 8, 32, 8, 32, 8, 8,
    8, 34, 8, 34, 8, 34, 1, 8, 8, 34, 8, 39, 8, 39, 8, 39, 8, 39, 6, 39, 8, 39, 6, 39, 6, 39, 6,
    39, 5, 39, 1, 8, 1, 8, 1, 34, 5, 39, 1, 39, 8, 34, 8, 33, 8, 33, 8, 33, 8, 32, 8, 32, 8, 8, 8,
    34, 8, 34, 8, 34, 1, 8, 8, 34, 8, 39, 8, 39, 8, 39, 8, 39, 6, 39, 8, 39, 6, 39, 6, 39, 6, 39,
    5, 39, 1, 8, 1, 34, 3, 8, 7, 8, 1, 39, 8, 28, 8, 28, 1, 4, 8, 38, 8, 38, 8, 37, 0, 0,
];
static _use_syllable_machine_char_class: [i8; 56] = [
    0, 1, 2, 2, 3, 4, 2, 2, 2, 2, 2, 5, 6, 7, 8, 2, 2, 2, 9, 2, 2, 2, 10, 11, 12, 13, 14, 15, 16,
    17, 18, 19, 20, 21, 22, 23, 2, 24, 25, 26, 2, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,
    39, 0, 0,
];
static _use_syllable_machine_index_offsets: [i16; 124] = [
    0, 40, 75, 110, 149, 176, 202, 228, 254, 279, 304, 305, 332, 359, 386, 394, 421, 453, 485, 517,
    549, 583, 615, 649, 683, 717, 752, 760, 794, 815, 836, 871, 910, 937, 963, 989, 1015, 1040,
    1065, 1066, 1093, 1120, 1147, 1155, 1182, 1214, 1246, 1278, 1310, 1344, 1376, 1410, 1444, 1478,
    1513, 1521, 1529, 1563, 1565, 1571, 1606, 1641, 1680, 1707, 1733, 1759, 1785, 1810, 1835, 1836,
    1863, 1890, 1917, 1925, 1952, 1984, 2016, 2048, 2080, 2114, 2146, 2180, 2214, 2248, 2283, 2291,
    2299, 2333, 2368, 2407, 2434, 2460, 2486, 2512, 2537, 2562, 2563, 2590, 2617, 2644, 2652, 2679,
    2711, 2743, 2775, 2807, 2841, 2873, 2907, 2941, 2975, 3010, 3018, 3052, 3058, 3060, 3099, 3120,
    3141, 3145, 3176, 3207, 0, 0,
];
static _use_syllable_machine_indices: [i16; 3239] = [
    1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 6, 20, 21, 22, 23, 24, 25,
    26, 27, 28, 29, 30, 31, 32, 33, 30, 34, 3, 35, 3, 36, 38, 39, 37, 40, 37, 41, 42, 43, 44, 45,
    46, 47, 48, 49, 38, 50, 51, 52, 53, 54, 55, 56, 57, 58, 37, 59, 60, 61, 62, 59, 37, 37, 37, 37,
    63, 38, 39, 37, 40, 37, 41, 42, 43, 44, 45, 46, 47, 48, 49, 38, 50, 51, 52, 53, 54, 55, 56, 37,
    37, 37, 59, 60, 61, 62, 59, 37, 37, 37, 37, 63, 38, 37, 37, 37, 37, 37, 37, 40, 37, 37, 42, 43,
    44, 45, 37, 37, 37, 37, 37, 37, 37, 37, 37, 54, 55, 56, 37, 37, 37, 37, 60, 61, 62, 64, 37, 37,
    37, 37, 42, 40, 37, 37, 42, 43, 44, 45, 37, 37, 37, 37, 37, 37, 37, 37, 37, 54, 55, 56, 37, 37,
    37, 37, 60, 61, 62, 64, 40, 37, 37, 37, 43, 44, 45, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
    37, 37, 37, 37, 37, 60, 61, 62, 40, 37, 37, 37, 37, 44, 45, 37, 37, 37, 37, 37, 37, 37, 37, 37,
    37, 37, 37, 37, 37, 37, 37, 60, 61, 62, 40, 37, 37, 37, 37, 37, 45, 37, 37, 37, 37, 37, 37, 37,
    37, 37, 37, 37, 37, 37, 37, 37, 37, 60, 61, 62, 40, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
    37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 60, 61, 40, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
    37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 61, 40, 40, 37, 37, 37, 43, 44, 45, 37, 37,
    37, 37, 37, 37, 37, 37, 37, 54, 55, 56, 37, 37, 37, 37, 60, 61, 62, 64, 40, 37, 37, 37, 43, 44,
    45, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 55, 56, 37, 37, 37, 37, 60, 61, 62, 64, 40, 37, 37,
    37, 43, 44, 45, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 56, 37, 37, 37, 37, 60, 61, 62, 64,
    65, 37, 37, 37, 37, 37, 37, 40, 40, 37, 37, 37, 43, 44, 45, 37, 37, 37, 37, 37, 37, 37, 37, 37,
    37, 37, 37, 37, 37, 37, 37, 60, 61, 62, 64, 40, 37, 41, 42, 43, 44, 45, 37, 37, 37, 37, 37, 37,
    51, 52, 53, 54, 55, 56, 37, 37, 37, 37, 60, 61, 62, 64, 37, 37, 37, 37, 42, 40, 37, 37, 42, 43,
    44, 45, 37, 37, 37, 37, 37, 37, 51, 52, 53, 54, 55, 56, 37, 37, 37, 37, 60, 61, 62, 64, 37, 37,
    37, 37, 42, 40, 37, 37, 42, 43, 44, 45, 37, 37, 37, 37, 37, 37, 37, 52, 53, 54, 55, 56, 37, 37,
    37, 37, 60, 61, 62, 64, 37, 37, 37, 37, 42, 40, 37, 37, 42, 43, 44, 45, 37, 37, 37, 37, 37, 37,
    37, 37, 53, 54, 55, 56, 37, 37, 37, 37, 60, 61, 62, 64, 37, 37, 37, 37, 42, 66, 37, 40, 37, 41,
    42, 43, 44, 45, 37, 47, 48, 37, 37, 37, 51, 52, 53, 54, 55, 56, 37, 37, 37, 37, 60, 61, 62, 64,
    37, 37, 37, 37, 42, 40, 37, 37, 42, 43, 44, 45, 37, 37, 37, 37, 37, 37, 37, 37, 37, 54, 55, 56,
    37, 37, 37, 37, 60, 61, 62, 64, 37, 37, 37, 37, 42, 66, 37, 40, 37, 41, 42, 43, 44, 45, 37, 37,
    48, 37, 37, 37, 51, 52, 53, 54, 55, 56, 37, 37, 37, 37, 60, 61, 62, 64, 37, 37, 37, 37, 42, 66,
    37, 40, 37, 41, 42, 43, 44, 45, 37, 37, 37, 37, 37, 37, 51, 52, 53, 54, 55, 56, 37, 37, 37, 37,
    60, 61, 62, 64, 37, 37, 37, 37, 42, 66, 37, 40, 37, 41, 42, 43, 44, 45, 46, 47, 48, 37, 37, 37,
    51, 52, 53, 54, 55, 56, 37, 37, 37, 37, 60, 61, 62, 64, 37, 37, 37, 37, 42, 38, 39, 37, 40, 37,
    41, 42, 43, 44, 45, 46, 47, 48, 49, 37, 50, 51, 52, 53, 54, 55, 56, 37, 37, 37, 59, 60, 61, 62,
    59, 37, 37, 37, 37, 63, 38, 37, 37, 37, 37, 37, 37, 40, 38, 37, 37, 37, 37, 37, 37, 40, 37, 37,
    42, 43, 44, 45, 37, 37, 37, 37, 37, 37, 37, 37, 37, 54, 55, 56, 37, 37, 37, 37, 60, 61, 62, 64,
    40, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 57, 58, 40, 37, 37,
    37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 58, 2, 68, 67, 69, 67, 70,
    71, 72, 73, 74, 75, 76, 77, 78, 2, 79, 80, 81, 82, 83, 84, 85, 67, 67, 67, 86, 87, 88, 89, 90,
    67, 67, 67, 67, 91, 2, 67, 67, 67, 67, 67, 67, 69, 67, 67, 71, 72, 73, 74, 67, 67, 67, 67, 67,
    67, 67, 67, 67, 83, 84, 85, 67, 67, 67, 67, 87, 88, 89, 92, 67, 67, 67, 67, 71, 69, 67, 67, 71,
    72, 73, 74, 67, 67, 67, 67, 67, 67, 67, 67, 67, 83, 84, 85, 67, 67, 67, 67, 87, 88, 89, 92, 69,
    67, 67, 67, 72, 73, 74, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 87, 88,
    89, 69, 67, 67, 67, 67, 73, 74, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
    87, 88, 89, 69, 67, 67, 67, 67, 67, 74, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
    67, 67, 87, 88, 89, 69, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
    67, 67, 67, 67, 87, 88, 69, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
    67, 67, 67, 67, 67, 67, 88, 69, 69, 67, 67, 67, 72, 73, 74, 67, 67, 67, 67, 67, 67, 67, 67, 67,
    83, 84, 85, 67, 67, 67, 67, 87, 88, 89, 92, 69, 67, 67, 67, 72, 73, 74, 67, 67, 67, 67, 67, 67,
    67, 67, 67, 67, 84, 85, 67, 67, 67, 67, 87, 88, 89, 92, 69, 67, 67, 67, 72, 73, 74, 67, 67, 67,
    67, 67, 67, 67, 67, 67, 67, 67, 85, 67, 67, 67, 67, 87, 88, 89, 92, 94, 93, 93, 93, 93, 93, 93,
    95, 69, 67, 67, 67, 72, 73, 74, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
    87, 88, 89, 92, 69, 67, 70, 71, 72, 73, 74, 67, 67, 67, 67, 67, 67, 80, 81, 82, 83, 84, 85, 67,
    67, 67, 67, 87, 88, 89, 92, 67, 67, 67, 67, 71, 69, 67, 67, 71, 72, 73, 74, 67, 67, 67, 67, 67,
    67, 80, 81, 82, 83, 84, 85, 67, 67, 67, 67, 87, 88, 89, 92, 67, 67, 67, 67, 71, 69, 67, 67, 71,
    72, 73, 74, 67, 67, 67, 67, 67, 67, 67, 81, 82, 83, 84, 85, 67, 67, 67, 67, 87, 88, 89, 92, 67,
    67, 67, 67, 71, 69, 67, 67, 71, 72, 73, 74, 67, 67, 67, 67, 67, 67, 67, 67, 82, 83, 84, 85, 67,
    67, 67, 67, 87, 88, 89, 92, 67, 67, 67, 67, 71, 96, 67, 69, 67, 70, 71, 72, 73, 74, 67, 76, 77,
    67, 67, 67, 80, 81, 82, 83, 84, 85, 67, 67, 67, 67, 87, 88, 89, 92, 67, 67, 67, 67, 71, 69, 67,
    67, 71, 72, 73, 74, 67, 67, 67, 67, 67, 67, 67, 67, 67, 83, 84, 85, 67, 67, 67, 67, 87, 88, 89,
    92, 67, 67, 67, 67, 71, 96, 67, 69, 67, 70, 71, 72, 73, 74, 67, 67, 77, 67, 67, 67, 80, 81, 82,
    83, 84, 85, 67, 67, 67, 67, 87, 88, 89, 92, 67, 67, 67, 67, 71, 96, 67, 69, 67, 70, 71, 72, 73,
    74, 67, 67, 67, 67, 67, 67, 80, 81, 82, 83, 84, 85, 67, 67, 67, 67, 87, 88, 89, 92, 67, 67, 67,
    67, 71, 96, 67, 69, 67, 70, 71, 72, 73, 74, 75, 76, 77, 67, 67, 67, 80, 81, 82, 83, 84, 85, 67,
    67, 67, 67, 87, 88, 89, 92, 67, 67, 67, 67, 71, 2, 68, 67, 69, 67, 70, 71, 72, 73, 74, 75, 76,
    77, 78, 67, 79, 80, 81, 82, 83, 84, 85, 67, 67, 67, 86, 87, 88, 89, 90, 67, 67, 67, 67, 91, 2,
    97, 97, 97, 97, 97, 97, 98, 2, 93, 93, 93, 93, 93, 93, 95, 2, 67, 67, 67, 67, 67, 67, 69, 67,
    67, 71, 72, 73, 74, 67, 67, 67, 67, 67, 67, 67, 67, 67, 83, 84, 85, 67, 67, 67, 67, 87, 88, 89,
    92, 100, 101, 4, 102, 102, 102, 102, 103, 104, 105, 67, 69, 67, 106, 107, 108, 109, 110, 111,
    112, 113, 114, 104, 115, 116, 117, 118, 119, 120, 121, 57, 58, 67, 122, 123, 124, 125, 126, 67,
    67, 67, 67, 127, 104, 105, 67, 69, 67, 106, 107, 108, 109, 110, 111, 112, 113, 114, 104, 115,
    116, 117, 118, 119, 120, 121, 67, 67, 67, 122, 123, 124, 125, 126, 67, 67, 67, 67, 127, 104,
    67, 67, 67, 67, 67, 67, 69, 67, 67, 107, 108, 109, 110, 67, 67, 67, 67, 67, 67, 67, 67, 67,
    119, 120, 121, 67, 67, 67, 67, 123, 124, 125, 128, 67, 67, 67, 67, 107, 69, 67, 67, 107, 108,
    109, 110, 67, 67, 67, 67, 67, 67, 67, 67, 67, 119, 120, 121, 67, 67, 67, 67, 123, 124, 125,
    128, 69, 67, 67, 67, 108, 109, 110, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
    67, 123, 124, 125, 69, 67, 67, 67, 67, 109, 110, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
    67, 67, 67, 67, 67, 123, 124, 125, 69, 67, 67, 67, 67, 67, 110, 67, 67, 67, 67, 67, 67, 67, 67,
    67, 67, 67, 67, 67, 67, 67, 67, 123, 124, 125, 69, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
    67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 123, 124, 69, 67, 67, 67, 67, 67, 67, 67, 67, 67,
    67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 124, 69, 69, 67, 67, 67, 108, 109, 110,
    67, 67, 67, 67, 67, 67, 67, 67, 67, 119, 120, 121, 67, 67, 67, 67, 123, 124, 125, 128, 69, 67,
    67, 67, 108, 109, 110, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 120, 121, 67, 67, 67, 67, 123,
    124, 125, 128, 69, 67, 67, 67, 108, 109, 110, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 121,
    67, 67, 67, 67, 123, 124, 125, 128, 129, 93, 93, 93, 93, 93, 93, 95, 69, 67, 67, 67, 108, 109,
    110, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 123, 124, 125, 128, 69,
    67, 106, 107, 108, 109, 110, 67, 67, 67, 67, 67, 67, 116, 117, 118, 119, 120, 121, 67, 67, 67,
    67, 123, 124, 125, 128, 67, 67, 67, 67, 107, 69, 67, 67, 107, 108, 109, 110, 67, 67, 67, 67,
    67, 67, 116, 117, 118, 119, 120, 121, 67, 67, 67, 67, 123, 124, 125, 128, 67, 67, 67, 67, 107,
    69, 67, 67, 107, 108, 109, 110, 67, 67, 67, 67, 67, 67, 67, 117, 118, 119, 120, 121, 67, 67,
    67, 67, 123, 124, 125, 128, 67, 67, 67, 67, 107, 69, 67, 67, 107, 108, 109, 110, 67, 67, 67,
    67, 67, 67, 67, 67, 118, 119, 120, 121, 67, 67, 67, 67, 123, 124, 125, 128, 67, 67, 67, 67,
    107, 130, 67, 69, 67, 106, 107, 108, 109, 110, 67, 112, 113, 67, 67, 67, 116, 117, 118, 119,
    120, 121, 67, 67, 67, 67, 123, 124, 125, 128, 67, 67, 67, 67, 107, 69, 67, 67, 107, 108, 109,
    110, 67, 67, 67, 67, 67, 67, 67, 67, 67, 119, 120, 121, 67, 67, 67, 67, 123, 124, 125, 128, 67,
    67, 67, 67, 107, 130, 67, 69, 67, 106, 107, 108, 109, 110, 67, 67, 113, 67, 67, 67, 116, 117,
    118, 119, 120, 121, 67, 67, 67, 67, 123, 124, 125, 128, 67, 67, 67, 67, 107, 130, 67, 69, 67,
    106, 107, 108, 109, 110, 67, 67, 67, 67, 67, 67, 116, 117, 118, 119, 120, 121, 67, 67, 67, 67,
    123, 124, 125, 128, 67, 67, 67, 67, 107, 130, 67, 69, 67, 106, 107, 108, 109, 110, 111, 112,
    113, 67, 67, 67, 116, 117, 118, 119, 120, 121, 67, 67, 67, 67, 123, 124, 125, 128, 67, 67, 67,
    67, 107, 104, 105, 67, 69, 67, 106, 107, 108, 109, 110, 111, 112, 113, 114, 67, 115, 116, 117,
    118, 119, 120, 121, 67, 67, 67, 122, 123, 124, 125, 126, 67, 67, 67, 67, 127, 104, 97, 97, 97,
    97, 97, 97, 98, 104, 93, 93, 93, 93, 93, 93, 95, 104, 67, 67, 67, 67, 67, 67, 69, 67, 67, 107,
    108, 109, 110, 67, 67, 67, 67, 67, 67, 67, 67, 67, 119, 120, 121, 67, 67, 67, 67, 123, 124,
    125, 128, 6, 7, 131, 9, 131, 11, 12, 13, 14, 15, 16, 17, 18, 19, 6, 20, 21, 22, 23, 24, 25, 26,
    131, 131, 131, 30, 31, 32, 33, 30, 131, 131, 131, 131, 36, 6, 131, 131, 131, 131, 131, 131, 9,
    131, 131, 12, 13, 14, 15, 131, 131, 131, 131, 131, 131, 131, 131, 131, 24, 25, 26, 131, 131,
    131, 131, 31, 32, 33, 132, 131, 131, 131, 131, 12, 9, 131, 131, 12, 13, 14, 15, 131, 131, 131,
    131, 131, 131, 131, 131, 131, 24, 25, 26, 131, 131, 131, 131, 31, 32, 33, 132, 9, 131, 131,
    131, 13, 14, 15, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
    131, 31, 32, 33, 9, 131, 131, 131, 131, 14, 15, 131, 131, 131, 131, 131, 131, 131, 131, 131,
    131, 131, 131, 131, 131, 131, 131, 31, 32, 33, 9, 131, 131, 131, 131, 131, 15, 131, 131, 131,
    131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 31, 32, 33, 9, 131, 131, 131,
    131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
    31, 32, 9, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
    131, 131, 131, 131, 131, 131, 32, 9, 9, 131, 131, 131, 13, 14, 15, 131, 131, 131, 131, 131,
    131, 131, 131, 131, 24, 25, 26, 131, 131, 131, 131, 31, 32, 33, 132, 9, 131, 131, 131, 13, 14,
    15, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 25, 26, 131, 131, 131, 131, 31, 32, 33,
    132, 9, 131, 131, 131, 13, 14, 15, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 26,
    131, 131, 131, 131, 31, 32, 33, 132, 133, 131, 131, 131, 131, 131, 131, 9, 9, 131, 131, 131,
    13, 14, 15, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 31,
    32, 33, 132, 9, 131, 11, 12, 13, 14, 15, 131, 131, 131, 131, 131, 131, 21, 22, 23, 24, 25, 26,
    131, 131, 131, 131, 31, 32, 33, 132, 131, 131, 131, 131, 12, 9, 131, 131, 12, 13, 14, 15, 131,
    131, 131, 131, 131, 131, 21, 22, 23, 24, 25, 26, 131, 131, 131, 131, 31, 32, 33, 132, 131, 131,
    131, 131, 12, 9, 131, 131, 12, 13, 14, 15, 131, 131, 131, 131, 131, 131, 131, 22, 23, 24, 25,
    26, 131, 131, 131, 131, 31, 32, 33, 132, 131, 131, 131, 131, 12, 9, 131, 131, 12, 13, 14, 15,
    131, 131, 131, 131, 131, 131, 131, 131, 23, 24, 25, 26, 131, 131, 131, 131, 31, 32, 33, 132,
    131, 131, 131, 131, 12, 134, 131, 9, 131, 11, 12, 13, 14, 15, 131, 17, 18, 131, 131, 131, 21,
    22, 23, 24, 25, 26, 131, 131, 131, 131, 31, 32, 33, 132, 131, 131, 131, 131, 12, 9, 131, 131,
    12, 13, 14, 15, 131, 131, 131, 131, 131, 131, 131, 131, 131, 24, 25, 26, 131, 131, 131, 131,
    31, 32, 33, 132, 131, 131, 131, 131, 12, 134, 131, 9, 131, 11, 12, 13, 14, 15, 131, 131, 18,
    131, 131, 131, 21, 22, 23, 24, 25, 26, 131, 131, 131, 131, 31, 32, 33, 132, 131, 131, 131, 131,
    12, 134, 131, 9, 131, 11, 12, 13, 14, 15, 131, 131, 131, 131, 131, 131, 21, 22, 23, 24, 25, 26,
    131, 131, 131, 131, 31, 32, 33, 132, 131, 131, 131, 131, 12, 134, 131, 9, 131, 11, 12, 13, 14,
    15, 16, 17, 18, 131, 131, 131, 21, 22, 23, 24, 25, 26, 131, 131, 131, 131, 31, 32, 33, 132,
    131, 131, 131, 131, 12, 6, 7, 131, 9, 131, 11, 12, 13, 14, 15, 16, 17, 18, 19, 131, 20, 21, 22,
    23, 24, 25, 26, 131, 131, 131, 30, 31, 32, 33, 30, 131, 131, 131, 131, 36, 6, 131, 131, 131,
    131, 131, 131, 9, 6, 131, 131, 131, 131, 131, 131, 9, 131, 131, 12, 13, 14, 15, 131, 131, 131,
    131, 131, 131, 131, 131, 131, 24, 25, 26, 131, 131, 131, 131, 31, 32, 33, 132, 135, 131, 131,
    131, 131, 9, 8, 9, 2, 131, 131, 2, 6, 7, 8, 9, 131, 11, 12, 13, 14, 15, 16, 17, 18, 19, 6, 20,
    21, 22, 23, 24, 25, 26, 27, 28, 131, 30, 31, 32, 33, 30, 131, 131, 131, 131, 36, 9, 131, 131,
    131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 27, 28, 9, 131,
    131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 28,
    2, 136, 136, 2, 138, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
    137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 139, 137, 34, 138, 137, 137, 137,
    137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
    137, 137, 137, 137, 34, 139, 137, 139, 138, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
    137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 34, 137, 35, 0,
    0,
];
static _use_syllable_machine_index_defaults: [i16; 124] = [
    3, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
    37, 37, 37, 37, 37, 37, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 93, 67, 67, 67, 67, 67,
    67, 67, 67, 67, 67, 67, 97, 93, 67, 99, 102, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
    67, 93, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 97, 93, 67, 131, 131, 131, 131, 131, 131,
    131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
    131, 131, 131, 131, 131, 131, 136, 137, 137, 137, 0, 0,
];
static _use_syllable_machine_cond_targs: [i8; 142] = [
    0, 1, 30, 0, 57, 59, 87, 88, 113, 0, 115, 101, 89, 90, 91, 92, 105, 107, 108, 109, 110, 102,
    103, 104, 96, 97, 98, 116, 117, 118, 111, 93, 94, 95, 119, 121, 112, 0, 2, 3, 0, 16, 4, 5, 6,
    7, 20, 22, 23, 24, 25, 17, 18, 19, 11, 12, 13, 28, 29, 26, 8, 9, 10, 27, 14, 15, 21, 0, 31, 0,
    44, 32, 33, 34, 35, 48, 50, 51, 52, 53, 45, 46, 47, 39, 40, 41, 54, 36, 37, 38, 55, 56, 42, 0,
    43, 0, 49, 0, 0, 0, 58, 0, 0, 0, 60, 61, 74, 62, 63, 64, 65, 78, 80, 81, 82, 83, 75, 76, 77,
    69, 70, 71, 84, 66, 67, 68, 85, 86, 72, 73, 79, 0, 99, 100, 106, 114, 0, 0, 0, 120, 0, 0,
];
static _use_syllable_machine_cond_actions: [i8; 142] = [
    0, 0, 0, 3, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 5, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 7, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0,
    10, 0, 11, 12, 13, 0, 14, 15, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 18, 19, 20, 0, 0, 0,
];
static _use_syllable_machine_to_state_actions: [i8; 124] = [
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
];
static _use_syllable_machine_from_state_actions: [i8; 124] = [
    2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
];
static _use_syllable_machine_eof_trans: [i16; 124] = [
    1, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38,
    38, 38, 38, 38, 38, 38, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 94, 68, 68, 68, 68, 68,
    68, 68, 68, 68, 68, 68, 98, 94, 68, 100, 103, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
    68, 94, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 98, 94, 68, 132, 132, 132, 132, 132, 132,
    132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
    132, 132, 132, 132, 132, 132, 137, 138, 138, 138, 0, 0,
];
static use_syllable_machine_start: i32 = 0;
static use_syllable_machine_first_final: i32 = 0;
static use_syllable_machine_error: i32 = -1;
static use_syllable_machine_en_main: i32 = 0;
#[derive(Clone, Copy)]
pub enum SyllableType {
    IndependentCluster,
    ViramaTerminatedCluster,
    SakotTerminatedCluster,
    StandardCluster,
    NumberJoinerTerminatedCluster,
    NumeralCluster,
    SymbolCluster,
    HieroglyphCluster,
    BrokenCluster,
    NonCluster,
}

pub fn find_syllables(buffer: &mut hb_buffer_t) {
    let mut cs = 0;
    let infos = Cell::as_slice_of_cells(Cell::from_mut(&mut buffer.info));
    let p0 = MachineCursor::new(infos, included);
    let mut p = p0;
    let mut ts = p0;
    let mut te = p0;
    let pe = p.end();
    let eof = p.end();
    let mut syllable_serial = 1u8;

    // Please manually replace assignments of 0 to p, ts, and te
    // to use p0 instead

    macro_rules! found_syllable {
        ($kind:expr) => {{
            found_syllable(ts.index(), te.index(), &mut syllable_serial, $kind, infos);
        }};
    }

    {
        cs = (use_syllable_machine_start) as i32;
        ts = p0;
        te = p0;
    }

    {
        let mut _trans = 0;
        let mut _keys: i32 = 0;
        let mut _inds: i32 = 0;
        let mut _ic = 0;
        '_resume: while (p != pe || p == eof) {
            '_again: while (true) {
                match (_use_syllable_machine_from_state_actions[(cs) as usize]) {
                    2 => {
                        ts = p;
                    }

                    _ => {}
                }
                if (p == eof) {
                    {
                        if (_use_syllable_machine_eof_trans[(cs) as usize] > 0) {
                            {
                                _trans =
                                    (_use_syllable_machine_eof_trans[(cs) as usize]) as u32 - 1;
                            }
                        }
                    }
                } else {
                    {
                        _keys = (cs << 1) as i32;
                        _inds = (_use_syllable_machine_index_offsets[(cs) as usize]) as i32;
                        if ((infos[p.index()].get().use_category() as u8) <= 53) {
                            {
                                _ic = (_use_syllable_machine_char_class[((infos[p.index()]
                                    .get()
                                    .use_category()
                                    as u8)
                                    as i32
                                    - 0)
                                    as usize]) as i32;
                                if (_ic
                                    <= (_use_syllable_machine_trans_keys[(_keys + 1) as usize])
                                        as i32
                                    && _ic
                                        >= (_use_syllable_machine_trans_keys[(_keys) as usize])
                                            as i32)
                                {
                                    _trans = (_use_syllable_machine_indices[(_inds
                                        + (_ic
                                            - (_use_syllable_machine_trans_keys[(_keys) as usize])
                                                as i32)
                                            as i32)
                                        as usize])
                                        as u32;
                                } else {
                                    _trans = (_use_syllable_machine_index_defaults[(cs) as usize])
                                        as u32;
                                }
                            }
                        } else {
                            {
                                _trans =
                                    (_use_syllable_machine_index_defaults[(cs) as usize]) as u32;
                            }
                        }
                    }
                }
                cs = (_use_syllable_machine_cond_targs[(_trans) as usize]) as i32;
                if (_use_syllable_machine_cond_actions[(_trans) as usize] != 0) {
                    {
                        match (_use_syllable_machine_cond_actions[(_trans) as usize]) {
                            12 => {
                                te = p + 1;
                                {
                                    found_syllable!(SyllableType::ViramaTerminatedCluster);
                                }
                            }
                            10 => {
                                te = p + 1;
                                {
                                    found_syllable!(SyllableType::SakotTerminatedCluster);
                                }
                            }
                            8 => {
                                te = p + 1;
                                {
                                    found_syllable!(SyllableType::StandardCluster);
                                }
                            }
                            16 => {
                                te = p + 1;
                                {
                                    found_syllable!(SyllableType::NumberJoinerTerminatedCluster);
                                }
                            }
                            14 => {
                                te = p + 1;
                                {
                                    found_syllable!(SyllableType::NumeralCluster);
                                }
                            }
                            6 => {
                                te = p + 1;
                                {
                                    found_syllable!(SyllableType::SymbolCluster);
                                }
                            }
                            20 => {
                                te = p + 1;
                                {
                                    found_syllable!(SyllableType::HieroglyphCluster);
                                }
                            }
                            4 => {
                                te = p + 1;
                                {
                                    found_syllable!(SyllableType::BrokenCluster);
                                    buffer.scratch_flags |=
                                        HB_BUFFER_SCRATCH_FLAG_HAS_BROKEN_SYLLABLE;
                                }
                            }
                            3 => {
                                te = p + 1;
                                {
                                    found_syllable!(SyllableType::NonCluster);
                                }
                            }
                            11 => {
                                te = p;
                                p = p - 1;
                                {
                                    found_syllable!(SyllableType::ViramaTerminatedCluster);
                                }
                            }
                            9 => {
                                te = p;
                                p = p - 1;
                                {
                                    found_syllable!(SyllableType::SakotTerminatedCluster);
                                }
                            }
                            7 => {
                                te = p;
                                p = p - 1;
                                {
                                    found_syllable!(SyllableType::StandardCluster);
                                }
                            }
                            15 => {
                                te = p;
                                p = p - 1;
                                {
                                    found_syllable!(SyllableType::NumberJoinerTerminatedCluster);
                                }
                            }
                            13 => {
                                te = p;
                                p = p - 1;
                                {
                                    found_syllable!(SyllableType::NumeralCluster);
                                }
                            }
                            5 => {
                                te = p;
                                p = p - 1;
                                {
                                    found_syllable!(SyllableType::SymbolCluster);
                                }
                            }
                            19 => {
                                te = p;
                                p = p - 1;
                                {
                                    found_syllable!(SyllableType::HieroglyphCluster);
                                }
                            }
                            17 => {
                                te = p;
                                p = p - 1;
                                {
                                    found_syllable!(SyllableType::BrokenCluster);
                                    buffer.scratch_flags |=
                                        HB_BUFFER_SCRATCH_FLAG_HAS_BROKEN_SYLLABLE;
                                }
                            }
                            18 => {
                                te = p;
                                p = p - 1;
                                {
                                    found_syllable!(SyllableType::NonCluster);
                                }
                            }

                            _ => {}
                        }
                    }
                }
                break '_again;
            }
            if (p == eof) {
                {
                    if (cs >= 0) {
                        break '_resume;
                    }
                }
            } else {
                {
                    match (_use_syllable_machine_to_state_actions[(cs) as usize]) {
                        1 => {
                            ts = p0;
                        }

                        _ => {}
                    }
                    p += 1;
                    continue '_resume;
                }
            }
            break '_resume;
        }
    }
}

#[inline]
fn found_syllable(
    start: usize,
    end: usize,
    syllable_serial: &mut u8,
    kind: SyllableType,
    buffer: &[Cell<hb_glyph_info_t>],
) {
    for i in start..end {
        let mut glyph = buffer[i].get();
        glyph.set_syllable((*syllable_serial << 4) | kind as u8);
        buffer[i].set(glyph);
    }

    *syllable_serial += 1;

    if *syllable_serial == 16 {
        *syllable_serial = 1;
    }
}

fn not_ccs_default_ignorable(i: &hb_glyph_info_t) -> bool {
    i.use_category() != category::CGJ
}

fn included(infos: &[Cell<hb_glyph_info_t>], i: usize) -> bool {
    let glyph = infos[i].get();
    if !not_ccs_default_ignorable(&glyph) {
        return false;
    }
    if glyph.use_category() == category::ZWNJ {
        for glyph2 in &infos[i + 1..] {
            if not_ccs_default_ignorable(&glyph2.get()) {
                return !_hb_glyph_info_is_unicode_mark(&glyph2.get());
            }
        }
    }
    true
}
