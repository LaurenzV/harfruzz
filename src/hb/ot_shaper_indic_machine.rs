#![allow(
    dead_code,
    non_upper_case_globals,
    unused_assignments,
    unused_parens,
    while_true,
    clippy::assign_op_pattern,
    clippy::comparison_chain,
    clippy::double_parens,
    clippy::unnecessary_cast,
    clippy::single_match,
    clippy::never_loop
)]

use super::buffer::{hb_buffer_t, HB_BUFFER_SCRATCH_FLAG_HAS_BROKEN_SYLLABLE};

static _indic_syllable_machine_trans_keys: [u8; 260] = [
    7, 7, 3, 7, 4, 6, 4, 7, 3, 7, 3, 11, 3, 7, 7, 7, 4, 6, 4, 7, 3, 7, 3, 11, 3, 11, 3, 11, 7, 7,
    4, 6, 4, 7, 3, 7, 3, 7, 3, 11, 7, 7, 4, 6, 4, 7, 3, 7, 3, 7, 4, 7, 7, 7, 0, 17, 2, 15, 2, 15,
    3, 15, 0, 14, 4, 8, 4, 8, 8, 8, 4, 8, 0, 14, 0, 14, 0, 14, 2, 8, 3, 8, 4, 8, 3, 8, 4, 8, 2, 8,
    4, 8, 2, 15, 2, 15, 2, 15, 2, 15, 3, 15, 0, 14, 2, 15, 2, 15, 3, 15, 0, 14, 4, 8, 8, 8, 4, 8,
    0, 14, 0, 14, 2, 8, 3, 8, 4, 8, 3, 8, 4, 8, 4, 8, 2, 8, 4, 8, 2, 15, 2, 15, 3, 7, 2, 15, 2, 15,
    3, 15, 0, 14, 2, 15, 0, 14, 4, 8, 8, 8, 4, 8, 0, 14, 0, 14, 2, 8, 3, 8, 4, 8, 2, 15, 3, 8, 4,
    8, 4, 8, 2, 8, 4, 8, 2, 15, 3, 11, 3, 7, 2, 15, 2, 15, 3, 15, 0, 14, 2, 15, 0, 14, 4, 8, 8, 8,
    4, 8, 0, 14, 0, 14, 2, 8, 3, 8, 4, 8, 2, 15, 3, 8, 4, 8, 4, 8, 2, 8, 4, 8, 0, 15, 2, 15, 0, 15,
    3, 11, 4, 8, 8, 8, 4, 8, 0, 14, 2, 8, 4, 8, 4, 8, 8, 8, 4, 8, 0, 14, 0, 0,
];
static _indic_syllable_machine_char_class: [i8; 20] = [
    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 0, 0,
];
static _indic_syllable_machine_index_offsets: [i16; 131] = [
    0, 1, 6, 9, 13, 18, 27, 32, 33, 36, 40, 45, 54, 63, 72, 73, 76, 80, 85, 90, 99, 100, 103, 107,
    112, 117, 121, 122, 140, 154, 168, 181, 196, 201, 206, 207, 212, 227, 242, 257, 264, 270, 275,
    281, 286, 293, 298, 312, 326, 340, 354, 367, 382, 396, 410, 423, 438, 443, 444, 449, 464, 479,
    486, 492, 497, 503, 508, 513, 520, 525, 539, 553, 558, 572, 586, 599, 614, 628, 643, 648, 649,
    654, 669, 684, 691, 697, 702, 716, 722, 727, 732, 739, 744, 758, 767, 772, 786, 800, 813, 828,
    842, 857, 862, 863, 868, 883, 898, 905, 911, 916, 930, 936, 941, 946, 953, 958, 974, 988, 1004,
    1013, 1018, 1019, 1024, 1039, 1046, 1051, 1056, 1057, 1062, 0, 0,
];
static _indic_syllable_machine_indices: [i16; 1079] = [
    1, 2, 3, 3, 4, 1, 3, 3, 4, 3, 3, 4, 1, 5, 3, 3, 4, 1, 2, 3, 3, 4, 1, 0, 0, 0, 6, 8, 9, 9, 10,
    11, 11, 9, 9, 10, 9, 9, 10, 11, 12, 9, 9, 10, 11, 8, 9, 9, 10, 11, 7, 7, 7, 13, 8, 9, 9, 10,
    11, 7, 7, 7, 14, 16, 17, 17, 18, 19, 15, 15, 15, 20, 19, 17, 17, 18, 17, 17, 18, 19, 16, 17,
    17, 18, 19, 22, 17, 17, 18, 19, 24, 25, 25, 26, 27, 23, 23, 23, 28, 27, 25, 25, 26, 25, 25, 26,
    27, 24, 25, 25, 26, 27, 29, 25, 25, 26, 27, 17, 17, 18, 1, 31, 34, 35, 36, 37, 38, 39, 18, 19,
    40, 41, 41, 20, 33, 42, 43, 44, 45, 46, 48, 49, 50, 51, 4, 1, 52, 47, 47, 6, 47, 47, 47, 53,
    54, 49, 55, 55, 4, 1, 52, 47, 47, 47, 47, 47, 47, 53, 49, 55, 55, 4, 1, 52, 47, 47, 47, 47, 47,
    47, 53, 34, 47, 47, 47, 56, 57, 47, 1, 52, 47, 47, 47, 47, 47, 34, 58, 58, 47, 1, 52, 52, 47,
    47, 59, 52, 52, 52, 47, 47, 47, 52, 34, 47, 60, 47, 58, 58, 47, 1, 52, 47, 47, 47, 47, 47, 34,
    34, 47, 47, 47, 58, 58, 47, 1, 52, 47, 47, 47, 47, 47, 34, 34, 47, 47, 47, 58, 57, 47, 1, 52,
    47, 47, 47, 47, 47, 34, 61, 62, 63, 63, 4, 1, 52, 62, 63, 63, 4, 1, 52, 63, 63, 4, 1, 52, 64,
    65, 65, 4, 1, 52, 56, 66, 47, 1, 52, 56, 47, 58, 58, 47, 1, 52, 58, 66, 47, 1, 52, 48, 49, 55,
    55, 4, 1, 52, 47, 47, 47, 47, 47, 47, 53, 48, 49, 50, 55, 4, 1, 52, 47, 47, 6, 47, 47, 47, 53,
    68, 69, 70, 71, 10, 11, 72, 67, 67, 14, 67, 67, 67, 73, 74, 69, 75, 71, 10, 11, 72, 67, 67, 67,
    67, 67, 67, 73, 69, 75, 71, 10, 11, 72, 67, 67, 67, 67, 67, 67, 73, 76, 67, 67, 67, 77, 78, 67,
    11, 72, 67, 67, 67, 67, 67, 76, 79, 69, 80, 81, 10, 11, 72, 67, 67, 13, 67, 67, 67, 73, 82, 69,
    75, 75, 10, 11, 72, 67, 67, 67, 67, 67, 67, 73, 69, 75, 75, 10, 11, 72, 67, 67, 67, 67, 67, 67,
    73, 76, 67, 67, 67, 83, 78, 67, 11, 72, 67, 67, 67, 67, 67, 76, 72, 67, 67, 84, 72, 72, 72, 67,
    67, 67, 72, 76, 67, 85, 67, 83, 83, 67, 11, 72, 67, 67, 67, 67, 67, 76, 76, 67, 67, 67, 83, 83,
    67, 11, 72, 67, 67, 67, 67, 67, 76, 86, 87, 88, 88, 10, 11, 72, 87, 88, 88, 10, 11, 72, 88, 88,
    10, 11, 72, 89, 90, 90, 10, 11, 72, 77, 91, 67, 11, 72, 83, 83, 67, 11, 72, 77, 67, 83, 83, 67,
    11, 72, 83, 91, 67, 11, 72, 79, 69, 75, 75, 10, 11, 72, 67, 67, 67, 67, 67, 67, 73, 79, 69, 80,
    75, 10, 11, 72, 67, 67, 13, 67, 67, 67, 73, 8, 9, 9, 10, 11, 68, 69, 75, 71, 10, 11, 72, 67,
    67, 67, 67, 67, 67, 73, 93, 37, 94, 94, 18, 19, 40, 92, 92, 92, 92, 92, 92, 44, 37, 94, 94, 18,
    19, 40, 92, 92, 92, 92, 92, 92, 44, 95, 92, 92, 92, 96, 97, 92, 19, 40, 92, 92, 92, 92, 92, 95,
    36, 37, 98, 99, 18, 19, 40, 92, 92, 20, 92, 92, 92, 44, 95, 92, 92, 92, 100, 97, 92, 19, 40,
    92, 92, 92, 92, 92, 95, 40, 92, 92, 101, 40, 40, 40, 92, 92, 92, 40, 95, 92, 102, 92, 100, 100,
    92, 19, 40, 92, 92, 92, 92, 92, 95, 95, 92, 92, 92, 100, 100, 92, 19, 40, 92, 92, 92, 92, 92,
    95, 103, 104, 105, 105, 18, 19, 40, 104, 105, 105, 18, 19, 40, 105, 105, 18, 19, 40, 36, 37,
    94, 94, 18, 19, 40, 92, 92, 92, 92, 92, 92, 44, 106, 107, 107, 18, 19, 40, 96, 108, 92, 19, 40,
    100, 100, 92, 19, 40, 96, 92, 100, 100, 92, 19, 40, 100, 108, 92, 19, 40, 36, 37, 98, 94, 18,
    19, 40, 92, 92, 20, 92, 92, 92, 44, 16, 17, 17, 18, 19, 109, 109, 109, 20, 16, 17, 17, 18, 19,
    111, 112, 113, 114, 26, 27, 115, 110, 110, 28, 110, 110, 110, 116, 117, 112, 114, 114, 26, 27,
    115, 110, 110, 110, 110, 110, 110, 116, 112, 114, 114, 26, 27, 115, 110, 110, 110, 110, 110,
    110, 116, 118, 110, 110, 110, 119, 120, 110, 27, 115, 110, 110, 110, 110, 110, 118, 111, 112,
    113, 41, 26, 27, 115, 110, 110, 28, 110, 110, 110, 116, 118, 110, 110, 110, 121, 120, 110, 27,
    115, 110, 110, 110, 110, 110, 118, 115, 110, 110, 122, 115, 115, 115, 110, 110, 110, 115, 118,
    110, 123, 110, 121, 121, 110, 27, 115, 110, 110, 110, 110, 110, 118, 118, 110, 110, 110, 121,
    121, 110, 27, 115, 110, 110, 110, 110, 110, 118, 124, 125, 126, 126, 26, 27, 115, 125, 126,
    126, 26, 27, 115, 126, 126, 26, 27, 115, 111, 112, 114, 114, 26, 27, 115, 110, 110, 110, 110,
    110, 110, 116, 127, 128, 128, 26, 27, 115, 119, 129, 110, 27, 115, 121, 121, 110, 27, 115, 119,
    110, 121, 121, 110, 27, 115, 121, 129, 110, 27, 115, 34, 35, 36, 37, 98, 94, 18, 19, 40, 41,
    41, 20, 92, 92, 34, 44, 48, 130, 50, 51, 4, 1, 52, 47, 47, 6, 47, 47, 47, 53, 34, 35, 36, 37,
    131, 132, 18, 133, 134, 47, 41, 20, 47, 47, 34, 44, 16, 135, 135, 18, 133, 52, 47, 47, 20, 134,
    47, 47, 136, 134, 134, 134, 47, 47, 47, 134, 34, 47, 60, 16, 135, 135, 18, 133, 52, 47, 47, 47,
    47, 47, 34, 138, 137, 139, 139, 137, 31, 140, 139, 139, 137, 31, 140, 140, 137, 137, 141, 140,
    140, 140, 137, 137, 137, 140, 34, 109, 109, 109, 109, 109, 109, 109, 109, 41, 109, 109, 109,
    109, 34, 0, 0,
];
static _indic_syllable_machine_index_defaults: [i16; 131] = [
    0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 15, 15, 21, 15, 15, 15, 23, 23, 23, 23, 23, 23, 0, 30,
    33, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 67, 67, 67,
    67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 92, 92,
    92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 109, 109, 110, 110,
    110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 92,
    47, 47, 47, 47, 47, 47, 47, 137, 137, 137, 137, 137, 109, 0, 0,
];
static _indic_syllable_machine_cond_targs: [i16; 144] = [
    27, 33, 38, 2, 39, 45, 46, 27, 55, 8, 61, 56, 68, 69, 72, 27, 77, 15, 83, 78, 86, 27, 91, 27,
    100, 21, 106, 101, 109, 114, 27, 125, 27, 27, 28, 48, 73, 75, 93, 94, 79, 95, 115, 116, 87,
    123, 128, 27, 29, 31, 5, 47, 34, 42, 30, 1, 32, 36, 0, 35, 37, 40, 41, 3, 43, 4, 44, 27, 49,
    51, 12, 71, 57, 64, 50, 6, 52, 66, 59, 53, 11, 70, 54, 7, 58, 60, 62, 63, 9, 65, 10, 67, 27,
    74, 17, 76, 89, 81, 13, 92, 14, 80, 82, 84, 85, 16, 88, 18, 90, 27, 27, 96, 98, 19, 23, 102,
    110, 97, 99, 112, 104, 20, 103, 105, 107, 108, 22, 111, 24, 113, 117, 118, 122, 119, 120, 25,
    121, 27, 124, 26, 126, 127, 0, 0,
];
static _indic_syllable_machine_cond_actions: [i8; 144] = [
    1, 0, 2, 0, 2, 2, 2, 3, 2, 0, 2, 0, 2, 2, 2, 4, 2, 0, 5, 0, 5, 6, 2, 7, 2, 0, 2, 0, 2, 2, 8, 0,
    0, 11, 2, 2, 5, 0, 12, 12, 0, 2, 5, 2, 5, 2, 0, 13, 2, 0, 0, 2, 0, 2, 2, 0, 2, 2, 0, 0, 2, 2,
    2, 0, 0, 0, 2, 14, 2, 0, 0, 2, 0, 2, 2, 0, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 2, 0, 0, 0, 2, 15,
    5, 0, 5, 2, 2, 0, 5, 0, 0, 2, 5, 5, 0, 0, 0, 2, 16, 17, 2, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 2,
    2, 2, 0, 0, 0, 2, 0, 18, 18, 0, 0, 0, 0, 19, 2, 0, 0, 0, 0, 0,
];
static _indic_syllable_machine_to_state_actions: [i8; 131] = [
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0,
];
static _indic_syllable_machine_from_state_actions: [i8; 131] = [
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0,
];
static _indic_syllable_machine_eof_trans: [i16; 131] = [
    1, 1, 1, 1, 1, 1, 8, 8, 8, 8, 8, 8, 8, 16, 16, 22, 16, 16, 16, 24, 24, 24, 24, 24, 24, 1, 31,
    33, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 68, 68, 68,
    68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 93, 93,
    93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 110, 110, 111, 111,
    111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 93,
    48, 48, 48, 48, 48, 48, 48, 138, 138, 138, 138, 138, 110, 0, 0,
];
static indic_syllable_machine_start: i32 = 27;
static indic_syllable_machine_first_final: i32 = 27;
static indic_syllable_machine_error: i32 = -1;
static indic_syllable_machine_en_main: i32 = 27;
#[derive(Clone, Copy)]
pub enum SyllableType {
    ConsonantSyllable = 0,
    VowelSyllable,
    StandaloneCluster,
    SymbolCluster,
    BrokenCluster,
    NonIndicCluster,
}

pub fn find_syllables_indic(buffer: &mut hb_buffer_t) {
    let mut cs = 0;
    let mut ts = 0;
    let mut te = 0;
    let mut act = 0;
    let mut p = 0;
    let pe = buffer.len;
    let eof = buffer.len;
    let mut syllable_serial = 1u8;

    macro_rules! found_syllable {
        ($kind:expr) => {{
            found_syllable(ts, te, &mut syllable_serial, $kind, buffer)
        }};
    }

    {
        cs = (indic_syllable_machine_start) as i32;
        ts = 0;
        te = 0;
        act = 0;
    }

    {
        let mut _trans = 0;
        let mut _keys: i32 = 0;
        let mut _inds: i32 = 0;
        let mut _ic = 0;
        '_resume: while (p != pe || p == eof) {
            '_again: while (true) {
                match (_indic_syllable_machine_from_state_actions[(cs) as usize]) {
                    10 => {
                        ts = p;
                    }

                    _ => {}
                }
                if (p == eof) {
                    {
                        if (_indic_syllable_machine_eof_trans[(cs) as usize] > 0) {
                            {
                                _trans =
                                    (_indic_syllable_machine_eof_trans[(cs) as usize]) as u32 - 1;
                            }
                        }
                    }
                } else {
                    {
                        _keys = (cs << 1) as i32;
                        _inds = (_indic_syllable_machine_index_offsets[(cs) as usize]) as i32;
                        if ((buffer.info[p].indic_category() as u8) <= 18
                            && (buffer.info[p].indic_category() as u8) >= 1)
                        {
                            {
                                _ic = (_indic_syllable_machine_char_class
                                    [((buffer.info[p].indic_category() as u8) as i32 - 1) as usize])
                                    as i32;
                                if (_ic
                                    <= (_indic_syllable_machine_trans_keys[(_keys + 1) as usize])
                                        as i32
                                    && _ic
                                        >= (_indic_syllable_machine_trans_keys[(_keys) as usize])
                                            as i32)
                                {
                                    _trans = (_indic_syllable_machine_indices[(_inds
                                        + (_ic
                                            - (_indic_syllable_machine_trans_keys[(_keys) as usize])
                                                as i32)
                                            as i32)
                                        as usize])
                                        as u32;
                                } else {
                                    _trans = (_indic_syllable_machine_index_defaults[(cs) as usize])
                                        as u32;
                                }
                            }
                        } else {
                            {
                                _trans =
                                    (_indic_syllable_machine_index_defaults[(cs) as usize]) as u32;
                            }
                        }
                    }
                }
                cs = (_indic_syllable_machine_cond_targs[(_trans) as usize]) as i32;
                if (_indic_syllable_machine_cond_actions[(_trans) as usize] != 0) {
                    {
                        match (_indic_syllable_machine_cond_actions[(_trans) as usize]) {
                            2 => {
                                te = p + 1;
                            }
                            11 => {
                                te = p + 1;
                                {
                                    found_syllable!(SyllableType::NonIndicCluster);
                                }
                            }
                            13 => {
                                te = p;
                                p = p - 1;
                                {
                                    found_syllable!(SyllableType::ConsonantSyllable);
                                }
                            }
                            14 => {
                                te = p;
                                p = p - 1;
                                {
                                    found_syllable!(SyllableType::VowelSyllable);
                                }
                            }
                            17 => {
                                te = p;
                                p = p - 1;
                                {
                                    found_syllable!(SyllableType::StandaloneCluster);
                                }
                            }
                            19 => {
                                te = p;
                                p = p - 1;
                                {
                                    found_syllable!(SyllableType::SymbolCluster);
                                }
                            }
                            15 => {
                                te = p;
                                p = p - 1;
                                {
                                    found_syllable!(SyllableType::BrokenCluster);
                                    buffer.scratch_flags |=
                                        HB_BUFFER_SCRATCH_FLAG_HAS_BROKEN_SYLLABLE;
                                }
                            }
                            16 => {
                                te = p;
                                p = p - 1;
                                {
                                    found_syllable!(SyllableType::NonIndicCluster);
                                }
                            }
                            1 => {
                                p = (te) - 1;
                                {
                                    found_syllable!(SyllableType::ConsonantSyllable);
                                }
                            }
                            3 => {
                                p = (te) - 1;
                                {
                                    found_syllable!(SyllableType::VowelSyllable);
                                }
                            }
                            7 => {
                                p = (te) - 1;
                                {
                                    found_syllable!(SyllableType::StandaloneCluster);
                                }
                            }
                            8 => {
                                p = (te) - 1;
                                {
                                    found_syllable!(SyllableType::SymbolCluster);
                                }
                            }
                            4 => {
                                p = (te) - 1;
                                {
                                    found_syllable!(SyllableType::BrokenCluster);
                                    buffer.scratch_flags |=
                                        HB_BUFFER_SCRATCH_FLAG_HAS_BROKEN_SYLLABLE;
                                }
                            }
                            6 => match (act) {
                                1 => {
                                    p = (te) - 1;
                                    {
                                        found_syllable!(SyllableType::ConsonantSyllable);
                                    }
                                }
                                5 => {
                                    p = (te) - 1;
                                    {
                                        found_syllable!(SyllableType::BrokenCluster);
                                        buffer.scratch_flags |=
                                            HB_BUFFER_SCRATCH_FLAG_HAS_BROKEN_SYLLABLE;
                                    }
                                }
                                6 => {
                                    p = (te) - 1;
                                    {
                                        found_syllable!(SyllableType::NonIndicCluster);
                                    }
                                }

                                _ => {}
                            },
                            18 => {
                                {
                                    {
                                        te = p + 1;
                                    }
                                }
                                {
                                    {
                                        act = 1;
                                    }
                                }
                            }
                            5 => {
                                {
                                    {
                                        te = p + 1;
                                    }
                                }
                                {
                                    {
                                        act = 5;
                                    }
                                }
                            }
                            12 => {
                                {
                                    {
                                        te = p + 1;
                                    }
                                }
                                {
                                    {
                                        act = 6;
                                    }
                                }
                            }

                            _ => {}
                        }
                    }
                }
                break '_again;
            }
            if (p == eof) {
                {
                    if (cs >= 27) {
                        break '_resume;
                    }
                }
            } else {
                {
                    match (_indic_syllable_machine_to_state_actions[(cs) as usize]) {
                        9 => {
                            ts = 0;
                        }

                        _ => {}
                    }
                    p += 1;
                    continue '_resume;
                }
            }
            break '_resume;
        }
    }
}

#[inline]
fn found_syllable(
    start: usize,
    end: usize,
    syllable_serial: &mut u8,
    kind: SyllableType,
    buffer: &mut hb_buffer_t,
) {
    for i in start..end {
        buffer.info[i].set_syllable((*syllable_serial << 4) | kind as u8);
    }

    *syllable_serial += 1;

    if *syllable_serial == 16 {
        *syllable_serial = 1;
    }
}
